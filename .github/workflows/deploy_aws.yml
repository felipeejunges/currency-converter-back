name: Deploy to AWS ECR

on:
  push:
    branches:
      - main
      - deploy-aws

jobs:
  deploy:
    name: Build and Push to AWS ECR
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 4: Log in to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      # Step 5: Copy docker-compose.production.yml (optional step to rename)
      - name: Rename docker-compose.production.yml
        run: |
          cp docker-compose.production.yml docker-compose.yml

      # Step 6: Build the Docker images using docker-compose with no-cache
      - name: Build Docker images
        run: |
          docker-compose build --no-cache

      # Step 7: Tag Docker images for server and sidekiq only
      - name: Tag Docker images
        run: |
          docker tag currency-converter-back-server:latest ${{ secrets.AWS_ECR_URL }}/currency-converter-back-server:latest
          docker tag currency-converter-back-sidekiq:latest ${{ secrets.AWS_ECR_URL }}/currency-converter-back-sidekiq:latest
          docker images

      # Step 8: Push Docker images to ECR (server and sidekiq only)
      - name: Push Docker images to ECR
        run: |
          docker push ${{ secrets.AWS_ECR_URL }}/currency-converter-back-server:latest
          docker push ${{ secrets.AWS_ECR_URL }}/currency-converter-back-sidekiq:latest

      # Step 9: Deploy to EC2 instance via SSH
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.2.2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Installing AWS CLI..."
            if ! command -v aws &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y unzip curl
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              aws --version
            else
              echo "AWS CLI already installed"
            fi

            echo "Sourcing environment variables..."
            if [ -f /.env ]; then
              set -a
              source /.env
              set +a
            fi

            sleep 5

            echo "Configuring AWS CLI credentials..."
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region us-east-1

            echo "Logging into Amazon ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${{ secrets.AWS_ECR_URL }}"

            echo "Removing old images..."
            docker rmi -f $(docker images -aq)

            echo "Pulling the latest Docker images from ECR..."
            docker pull "${{ secrets.AWS_ECR_URL }}/currency-converter-back-server:latest"
            docker pull "${{ secrets.AWS_ECR_URL }}/currency-converter-back-sidekiq:latest"

            echo "Stopping and removing any existing containers..."
            docker stop currency-converter-back-server || true
            docker rm currency-converter-back-server || true
            docker stop currency-converter-back-sidekiq || true
            docker rm currency-converter-back-sidekiq || true

            echo "Running the new Docker containers..."
            bash -c "docker run -d -p 4000:4000 --name currency-converter-back-server \
              -e SECRET_KEY_BASE=\"$SECRET_KEY_BASE\" \
              -e DB_HOSTNAME=\"$DB_HOSTNAME\" \
              -e DB_USERNAME=\"$DB_USERNAME\" \
              -e DB_PASSWORD=\"$DB_PASSWORD\" \
              -e CURRENCY_API_KEY=\"$CURRENCY_API_KEY\" \
              -e REDIS_URL_SIDEKIQ_CC=\"$REDIS_URL_SIDEKIQ_CC\" \
              \"$AWS_ECR_URL/currency-converter-back-server:latest\""

            bash -c "docker run -d --name currency-converter-back-sidekiq \
              -e SECRET_KEY_BASE=\"$SECRET_KEY_BASE\" \
              -e DB_HOSTNAME=\"$DB_HOSTNAME\" \
              -e DB_USERNAME=\"$DB_USERNAME\" \
              -e DB_PASSWORD=\"$DB_PASSWORD\" \
              -e CURRENCY_API_KEY=\"$CURRENCY_API_KEY\" \
              -e REDIS_URL_SIDEKIQ_CC=\"$REDIS_URL_SIDEKIQ_CC\" \
              \"$AWS_ECR_URL/currency-converter-back-sidekiq:latest\""

            echo "Generating allowed_routes.conf inside running container..."
            container_id=$(docker ps -q -f name=currency-converter-back-server)

            docker exec $container_id bash -c "
              RAILS_ENV=production bundle exec rails routes -o | \
              awk '{print \$3}' | grep '^/' | grep -v '^/rails/' | sort | uniq | \
              while read path; do
                clean_path=\$(echo \"\$path\" | sed 's/(\\.:format)//; s/:.*//')
                echo \"location ^~ \$clean_path {
                  proxy_pass http://localhost:4000;
                  proxy_set_header Host \\\$host;
                  proxy_set_header X-Real-IP \\\$remote_addr;
                  proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \\\$scheme;
                }\"
              done > allowed_routes.conf
            "
            docker cp $container_id:/currency-converter-back/allowed_routes.conf ./currency-converter-back-allowed_routes.conf
            sudo mv ./currency-converter-back-allowed_routes.conf /etc/nginx/currency-converter-back-allowed_routes.conf

            echo "Restarting Nginx..."
            sudo nginx -t                                                                  
            sudo systemctl reload nginx